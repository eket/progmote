// Generated by CoffeeScript 1.3.3
(function() {
  var AIH, API, G, eject_min_radius, eject_throttle, last_ejects, wait_eject, _ref;

  _ref = [window._ai = {}, window._ai_helper, window._geom], API = _ref[0], AIH = _ref[1], G = _ref[2];

  last_ejects = [];

  eject_throttle = 5;

  eject_min_radius = 0.01;

  wait_eject = function(i, now) {
    var l;
    if ((l = last_ejects[i]) != null) {
      return l + eject_throttle - now;
    } else {
      return 0;
    }
  };

  API.doit = function(ctx, motes, now, strain) {
    var move, others, sames;
    sames = _.filter(motes, AIH.same(strain));
    others = _.reject(motes, AIH.same(strain));
    move = others.length === 0 ? 'done' : _.map(sames, function(mote, i) {
      var r, target, targets, vx, vy, wait, x, y;
      x = mote.x, y = mote.y, vx = mote.vx, vy = mote.vy, r = mote.radius;
      if (r > eject_min_radius) {
        targets = _.sortBy(_.filter(others, function(other) {
          return other.radius < r;
        }), function(other) {
          return G.distance(mote, other);
        });
        wait = wait_eject(i, now);
        AIH.draw_counter(ctx, mote, wait / eject_throttle);
        AIH.draw_targets(ctx, mote, targets);
        if (targets.length > 0 && wait <= 0) {
          last_ejects[i] = now;
          target = _.first(targets);
          return G.pi + Math.atan2(target.y - y, target.x - x);
        } else {
          return null;
        }
      } else {
        return null;
      }
    });
    return move;
  };

}).call(this);
