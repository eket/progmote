// Generated by CoffeeScript 1.3.3
(function() {
  var AI, API, IO, V, VH, motes, pick_strain, send_ejects, sock, _ref;

  _ref = [window._live_view = {}, window._view_helper, window._view, window._ai, window.io], API = _ref[0], VH = _ref[1], V = _ref[2], AI = _ref[3], IO = _ref[4];

  API.ai_strain = null;

  motes = [];

  sock = null;

  API.init = function(cvs, ctx) {
    VH.add_event_listener(cvs, 'down', function(e) {
      var x, y, _ref1;
      _ref1 = [VH.get_x(e), VH.get_y(e)], x = _ref1[0], y = _ref1[1];
      return pick_strain(x, y, ctx);
    });
    ___('initialize socket');
    sock = IO.connect(':4567');
    return sock.on('connect', function() {
      ___('connected');
      return sock.on('update', function(d) {
        var time;
        motes = d.motes, time = d.time;
        V.update(motes);
        if (API.ai_strain != null) {
          return send_ejects(ctx, motes, time);
        }
      });
    });
  };

  send_ejects = function(ctx, motes, time) {
    var ejects, p;
    ejects = AI.doit(ctx, motes, time, API.ai_strain);
    p = {
      strain: API.ai_strain,
      ejects: ejects
    };
    return sock.emit('ejects', p);
  };

  pick_strain = function(x, y, ctx) {
    var picked;
    picked = _.first(_.sortBy(motes, function(mote) {
      return VH.distance(x, y, V.a * mote.x, V.a * mote.y);
    }));
    if (picked != null) {
      API.ai_strain = picked.strain;
    }
    return send_ejects(ctx, motes, 0);
  };

}).call(this);
