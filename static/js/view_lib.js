// Generated by CoffeeScript 1.3.3
(function() {
  var API, G, M, O, _ref;

  window.___ = function(x) {
    return console.log(x);
  };

  _ref = [window._view_helper = {}, window._mote, window._geom, window.one], API = _ref[0], M = _ref[1], G = _ref[2], O = _ref[3];

  API.clr = function(ctx, w, h) {
    if (h == null) {
      h = w;
    }
    return ctx.clearRect(0, 0, w, h);
  };

  API.label_height = 20;

  API.white = O.color('#fff');

  API.set_text = function(ctx, color) {
    if (color == null) {
      color = API.white;
    }
    ctx.font = "normal " + API.label_height + "px monospace";
    return ctx.fillStyle = color.cssa();
  };

  API.set_text_over_point = function(ctx, side, color) {
    API.set_text(ctx, color != null ? color : (O.color(ctx.fillStyle)).alpha(0.2));
    ctx.textBaseline = 'bottom';
    return ctx.textAlign = side;
  };

  API.annotate = function(ctx, mote, txt, opts) {
    var a, color, label_x, label_y, line, r, side, x, y, _ref1, _ref2;
    if (opts == null) {
      opts = {};
    }
    x = mote.x, y = mote.y, r = mote.radius;
    _ref1 = _.defaults(opts, {
      side: 'right',
      color: null,
      line: 0,
      a: window._view.a
    }), side = _ref1.side, color = _ref1.color, line = _ref1.line, a = _ref1.a;
    API.set_text_over_point(ctx, side, color);
    _ref2 = [a * x, a * (y - r) - line * API.label_height], label_x = _ref2[0], label_y = _ref2[1];
    return ctx.fillText(txt, label_x, label_y);
  };

  API.events = {
    down: ['mousedown', 'touchstart'],
    up: ['mouseup', 'touchend'],
    move: ['mousemove', 'touchmove']
  };

  API.get_x = function(e, i) {
    var _ref1;
    if (i == null) {
      i = 0;
    }
    return ((_ref1 = e.targetTouches) != null ? _ref1[i].pageX : void 0) || e.clientX;
  };

  API.get_y = function(e, i) {
    var _ref1;
    if (i == null) {
      i = 0;
    }
    return ((_ref1 = e.targetTouches) != null ? _ref1[i].pageY : void 0) || e.clientY;
  };

  API.add_event_listener = function(el, event_key, fun) {
    var event, _i, _len, _ref1, _results;
    _ref1 = API.events[event_key];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      event = _ref1[_i];
      _results.push(el.addEventListener(event, (function(e) {
        fun(e);
        return e.preventDefault();
      }), false));
    }
    return _results;
  };

}).call(this);
