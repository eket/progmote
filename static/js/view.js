// Generated by CoffeeScript 1.3.3
(function() {
  var API, G, M, S, VH, canvas, context, draw_mote, resize, _ref;

  _ref = [window._view = {}, window._view_helper, window._mote, window._geom, window._strains.colors], API = _ref[0], VH = _ref[1], M = _ref[2], G = _ref[3], S = _ref[4];

  API.a = null;

  API.hud = {
    speed: true,
    radius: 0,
    mass: 1,
    time: true
  };

  canvas = null;

  context = null;

  resize = function() {
    var _ref1;
    API.a = _.min([window.innerWidth, window.innerHeight]);
    _ref1 = [API.a, API.a], canvas.width = _ref1[0], canvas.height = _ref1[1];
    return ___("resized canvas to " + API.a + "x" + API.a);
  };

  API.init = function() {
    window.addEventListener('resize', resize, false);
    canvas = document.getElementById('arena_canvas');
    context = canvas.getContext('2d');
    window._solo.init(canvas, context);
    return resize();
  };

  API.update = function(motes, time) {
    VH.clr(context, API.a);
    _.map(motes, function(mote) {
      return draw_mote(context, mote);
    });
    if (API.hud.time) {
      VH.set_text_over_point(context, 'left', VH.white);
      return context.fillText(('' + time).slice(0, 8), API.a * 0.01, API.a * 0.99);
    }
  };

  draw_mote = function(ctx, mote) {
    var mass, nx, ny, r, s, scale, vx, vy, x, y, _ref1;
    x = mote.x, y = mote.y, vx = mote.vx, vy = mote.vy, r = mote.radius, s = mote.strain;
    ctx.fillStyle = S[s];
    ctx.beginPath();
    ctx.arc(API.a * x, API.a * y, API.a * r, 0, 2 * G.pi, false);
    ctx.fill();
    if (API.hud.radius >= 0) {
      VH.annotate(ctx, mote, "r " + ('' + r).slice(0, 8), {
        line: API.hud.radius
      });
    }
    if (API.hud.mass >= 0) {
      mass = M.fun_mass(r);
      VH.annotate(ctx, mote, "m " + ('' + mass).slice(0, 8), {
        line: API.hud.mass
      });
    }
    if (API.hud.speed) {
      _ref1 = G.norm(vx, vy), nx = _ref1[0], ny = _ref1[1];
      scale = 50;
      ctx.strokeStyle = S[s];
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(API.a * x, API.a * y);
      ctx.lineTo(API.a * (x + r * vx * scale + r * nx), API.a * (y + r * vy * scale + r * ny));
      return ctx.stroke();
    }
  };

}).call(this);
