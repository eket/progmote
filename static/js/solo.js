// Generated by CoffeeScript 1.3.3
(function() {
  var AI, API, AR, F, G, V, VH, context, dt, motes, pick_strain, time, _loop, _ref;

  _ref = [window._solo = {}, window._view_helper, window._view, window._ai, window._arena, window._fixtures, window._geom], API = _ref[0], VH = _ref[1], V = _ref[2], AI = _ref[3], AR = _ref[4], F = _ref[5], G = _ref[6];

  API.done = false;

  API.ai_strain = null;

  context = null;

  motes = [];

  dt = 0.05;

  time = 0;

  _loop = _.throttle((function() {
    var ais, move;
    ___('.');
    V.update(motes, time);
    ais = {};
    if (API.ai_strain != null) {
      move = AI.doit(context, motes, time, API.ai_strain);
      API.done = move === 'done';
      if (!API.done) {
        ais[API.ai_strain] = move;
      }
    }
    motes = AR.step(motes, ais, dt);
    time += dt;
    if (!API.done) {
      return _loop();
    }
  }), 30);

  API.init = function(cvs, ctx) {
    VH.add_event_listener(cvs, 'down', function(e) {
      var x, y, _ref1;
      _ref1 = [VH.get_x(e), VH.get_y(e)], x = _ref1[0], y = _ref1[1];
      return pick_strain(x, y);
    });
    VH.add_event_listener(cvs, 'move', function(e) {
      var prog;
      prog = (VH.get_x(e)) / V.a;
      return dt = prog / 10;
    });
    context = ctx;
    motes = AR.setup_random(50, F.random_mote);
    _.each(motes, function(m) {
      return m.vx = m.vy = 0;
    });
    return _loop();
  };

  pick_strain = function(x, y) {
    var picked;
    picked = _.first(_.sortBy(motes, function(mote) {
      return G.distance(x, y, V.a * mote.x, V.a * mote.y);
    }));
    if (picked != null) {
      return API.ai_strain = picked.strain;
    }
  };

}).call(this);
